{
  "rfc": {
    "scope": "typescript,typescriptreact",
    "prefix": "rfc",
    "body": [
      "import React from 'react';\r",
      "\r",
      "const ${TM_FILENAME_BASE} = (): React.JSX.Element | null => {\r",
      "  return <>${1}</>;\r",
      "};\r",
      "\r",
      "export default ${TM_FILENAME_BASE};\r",
      ""
    ],
    "description": "React Function component"
  },
  "rfcp": {
    "scope": "typescript,typescriptreact",
    "prefix": "rfcp",
    "body": [
      "import React from 'react';\r",
      "\r",
      "interface I${TM_FILENAME_BASE}Props {\r",
      "  ${1}\r",
      "};\r",
      "\r",
      "const ${TM_FILENAME_BASE} = ({  }: I${TM_FILENAME_BASE}Props): React.JSX.Element | null => {\r",
      "  \r",
      "  return <></>;\r",
      "};\r",
      "\r",
      "export default ${TM_FILENAME_BASE};\r",
      ""
    ],
    "description": "React Function component with props"
  },
  "rfcpc": {
    "scope": "typescript,typescriptreact",
    "prefix": "rfcpc",
    "body": [
      "import React from 'react';\r",
      "\r",
      "interface I${TM_FILENAME_BASE}Props {\r",
      "  children: React.JSX.Element | null;\r",
      "};\r",
      "\r",
      "const ${TM_FILENAME_BASE} = ({ children }: I${TM_FILENAME_BASE}Props): React.JSX.Element | null => {\r",
      "  ${1}\r",
      "\r",
      "  return <div>{children}</div>;\r",
      "};\r",
      "\r",
      "export default ${TM_FILENAME_BASE};\r",
      ""
    ],
    "description": "React Function component with children props"
  },
  "Zustand store": {
    "scope": "typescript,typescriptreact",
    "prefix": "zs",
    "body": [
      "import { create } from 'zustand';",
      "",
      "interface I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g}  {",
      "  $1",
      "}",
      "",
      "export interface I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} extends I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} {",
      "  reset: () => void;",
      "}",
      "",
      "const initialState: I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} = {",
      "  $2",
      "}",
      "",
      "const use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} = create<I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}>(",
      "  (set) => ({",
      "    ...initialState,",
      "    reset: () => set(initialState),",
      "  })",
      ");",
      "",
      "export default use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g};"
    ],
    "description": "Zustand default snippet"
  },
  "zustand store with immer": {
    "scope": "typescript,typescriptreact",
    "prefix": "zsi",
    "body": [
      "import { create } from 'zustand';",
      "import { immer } from 'zustand/middleware/immer';",
      "",
      "interface I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g}  {",
      "  $1",
      "}",
      "",
      "export interface I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} extends I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} {",
      "  reset: () => void;",
      "}",
      "",
      "const initialState: I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} = {",
      "  $2",
      "}",
      "",
      "const use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} = create<I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}>()(",
      "  immer<I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}>((set) => ({",
      "    ...initialState,",
      "    reset: () => set(initialState),",
      "  }))",
      ");",
      "",
      "export default use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g};"
    ],
    "description": "zustand store with immer"
  },
  "zustand store with dev, persist": {
    "scope": "typescript,typescriptreact",
    "prefix": "zsdp",
    "body": [
      "import { create } from 'zustand';",
      "import { createJSONStorage, devtools, persist } from 'zustand/middleware';",
      "",
      "interface I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g}  {",
      "  $1",
      "}",
      "",
      "export interface I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} extends I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} {",
      "  reset: () => void;",
      "}",
      "",
      "const initialState: I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} = {",
      "  $2",
      "}",
      "",
      "const use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} = create<I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}>()(",
      "  devtools(",
      "    persist((set) => ({",
      "        ...initialState,",
      "        reset: () => {",
      "          set(initialState);",
      "        },",
      "      }),",
      "      {",
      "        name: '${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}-storage',",
      "        storage: createJSONStorage(() => ${3|localStorage,sessionStorage|}),",
      "      }",
      "    ),",
      "    {",
      "        enabled: ${4|true,false|}",
      "    }",
      "  )",
      ");",
      "",
      "export default use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}"
    ],
    "description": "zustand store with dev, persist"
  },
  "zustand store with persist": {
    "scope": "typescript,typescriptreact",
    "prefix": "zsp",
    "body": [
      "import { create } from 'zustand';",
      "import { createJSONStorage, persist } from 'zustand/middleware';",
      "",
      "interface I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g}  {",
      "  $1",
      "}",
      "",
      "export interface I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} extends I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} {",
      "  reset: () => void;",
      "}",
      "",
      "const initialState: I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} = {",
      "  $2",
      "}",
      "",
      "const use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} = create<I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}>()(",
      "  persist(",
      "    (set) => ({",
      "      ...initialState,",
      "      reset: () => {",
      "        set(initialState);",
      "      },",
      "    }),",
      "    {",
      "      name: '${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}-storage',",
      "      storage: createJSONStorage(() => ${3|localStorage,sessionStorage|}),",
      "    }",
      "  )",
      ");",
      "",
      "export default use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g};"
    ],
    "description": "zustand store with persist"
  },
  "zustand store with dev, immer, persist": {
    "scope": "typescript,typescriptreact",
    "prefix": "zsdip",
    "body": [
      "import { create } from 'zustand';",
      "import { createJSONStorage, devtools, persist } from 'zustand/middleware';",
      "import { immer } from 'zustand/middleware/immer';",
      "",
      "interface I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g}  {",
      "  $1",
      "}",
      "",
      "export interface I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} extends I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} {",
      "  reset: () => void;",
      "}",
      "",
      "const initialState: I${TM_FILENAME_BASE/(^.)(.*)(Store$)/${1:/upcase}$2${3:+State}/g} = {",
      "  $2",
      "}",
      "",
      "const use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g} = create<I${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}>()(",
      "  devtools(",
      "    persist(",
      "      immer((set) => ({",
      "        ...initialState,",
      "        reset: () => {",
      "          set(initialState);",
      "        },",
      "      })),",
      "      {",
      "        name: '${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}-storage',",
      "        storage: createJSONStorage(() => ${3|localStorage,sessionStorage|}),",
      "      }",
      "    ),",
      "    {",
      "      enabled: ${4|true,false|}",
      "    }",
      "  )",
      ");",
      "",
      "export default use${TM_FILENAME_BASE/(^.)(.*)/${1:/upcase}$2/g}"
    ],
    "description": "zustand store with dev, immer, persist"
  },
  "React Context Provider": {
    "scope": "typescript,typescriptreact",
    "prefix": "rp",
    "body": [
      "import React, { createContext, useContext, useState } from 'react';",
      "",
      "interface I${TM_FILENAME_BASE/Provider/Context/g}State {",
      "  value: string;",
      "}",
      "",
      "interface I${TM_FILENAME_BASE/Provider/Context/g} extends I${TM_FILENAME_BASE/Provider/Context/g}State {",
      "  setValue: React.Dispatch<React.SetStateAction<string>>;",
      "}",
      "",
      "const ${TM_FILENAME_BASE/Provider/Context/g} = createContext<I${TM_FILENAME_BASE/Provider/Context/g} | undefined>(undefined);",
      "",
      "interface I${TM_FILENAME_BASE}Props {",
      "  children: React.ReactNode;",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}: React.FC<I${TM_FILENAME_BASE}Props> = ({ children }: I${TM_FILENAME_BASE}Props) => {",
      "  const [value, setValue] = useState<string>('');",
      "  return <${TM_FILENAME_BASE/Provider/Context/g}.Provider value={{ value, setValue }}>{children}</${TM_FILENAME_BASE/Provider/Context/g}.Provider>;",
      "};",
      "",
      "export const use${TM_FILENAME_BASE/Provider/Context/g} = () => {",
      "  const context = useContext(${TM_FILENAME_BASE/Provider/Context/g});",
      "  if (!context) {",
      "    throw new Error('use${TM_FILENAME_BASE/Provier/Context/g} must be used within a ${TM_FILENAME_BASE}');",
      "  }",
      "  return context;",
      "};",
      ""
    ],
    "description": "React Context Provider"
  },
  "useNavigate": {
    "scope": "typescript,typescriptreact",
    "prefix": "useN",
    "body": ["const navigate = useNavigate();"],
    "description": "useNavigate"
  },
  "useTranslation": {
    "scope": "typescript,typescriptreact",
    "prefix": "useT",
    "body": ["const { t } = useTranslation();"],
    "description": "useTranslation"
  }
}
