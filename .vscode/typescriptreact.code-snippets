{
  "rfc": {
    "scope": "typescript,typescriptreact",
    "prefix": "rfc",
    "body": [
      "import React from 'react';\r",
      "\r",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} = (): React.JSX.Element | null => {\r",
      "  return <>${1}</>;\r",
      "};\r",
      "\r",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};\r",
      ""
    ],
    "description": "React Function component"
  },
  "rfcp": {
    "scope": "typescript,typescriptreact",
    "prefix": "rfcp",
    "body": [
      "import React from 'react';\r",
      "\r",
      "interface I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Props {\r",
      "  ${1}\r",
      "};\r",
      "\r",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} = ({  }: I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Props): React.JSX.Element | null => {\r",
      "  \r",
      "  return <></>;\r",
      "};\r",
      "\r",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};\r",
      ""
    ],
    "description": "React Function component with props"
  },
  "rfcpc": {
    "scope": "typescript,typescriptreact",
    "prefix": "rfcpc",
    "body": [
      "import React from 'react';\r",
      "\r",
      "interface I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Props {\r",
      "  children: React.JSX.Element | null;\r",
      "};\r",
      "\r",
      "const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} = ({ children }: I${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Props): React.JSX.Element | null => {\r",
      "  ${1}\r",
      "\r",
      "  return <div>{children}</div>;\r",
      "};\r",
      "\r",
      "export default ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g};\r",
      ""
    ],
    "description": "React Function component with children props"
  },
  "tt": {
    "scope": "typescript,typescriptreact",
    "prefix": "tt",
    "body": [
      "${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}Context/}",
    ],
    "description": "React Function component"
  },
  "React Context Provider": {
    "scope": "typescript,typescriptreact",
    "prefix": "rp",
    "body": [
      "import React, { createContext, useContext, useState } from 'react';",
      "",
      "interface ${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}ContextState {",
      "  value: string;",
      "}",
      "",
      "interface ${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}ContextAction extends ${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}ContextState {",
      "  setValue: React.Dispatch<React.SetStateAction<string>>;",
      "}",
      "",
      "const ${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}Context = createContext<${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}ContextAction | undefined>(undefined);",
      "",
      "interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Props {",
      "  children: React.ReactNode;",
      "}",
      "",
      "export const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}: React.FC<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Props> = ({ children }: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g}Props) => {",
      "  const [value, setValue] = useState<string>('');",
      "  return <${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}Context.Provider value={{ value, setValue }}>{children}</${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}Context.Provider>;",
      "};",
      "",
      "export const use${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}Context = () => {",
      "  const context = useContext(${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}Context);",
      "  if (!context) {",
      "    throw new Error('use${TM_FILENAME_BASE/^(.*)-provider$/${1:/pascalcase}/}Context must be used within a ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}');",
      "  }",
      "  return context;",
      "};",
    ],
    "description": "React Context Provider"
  }
}